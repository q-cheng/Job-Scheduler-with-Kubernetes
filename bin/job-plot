#!/usr/bin/python3

import warnings
warnings.filterwarnings("ignore", message="numpy.dtype size changed")
import pandas as pd
import datetime
import matplotlib
matplotlib.use('Agg')
import matplotlib.pyplot as plt
import matplotlib.colors as pltc
from matplotlib.backends.backend_pdf import PdfPages
import matplotlib.patches as mpatch
from random import sample
import numpy as np
import argparse
import os
def JobVisual(df,pdf):
    fig = plt.figure()
    header = ['Pending','Running (Fast)','Running (Slow)']
    dataset = [pd.to_numeric(df["creationTime"]), pd.to_numeric(df["scheduledTime"] - df["creationTime"]), df["isPreferedNodes"] * pd.to_numeric(df["completionTime"] - df["scheduledTime"]), ~df["isPreferedNodes"] * pd.to_numeric(df["completionTime"] - df["scheduledTime"])]

    matplotlib.rc('font', serif='Helvetica Neue')
    matplotlib.rc('text', usetex='false')
    matplotlib.rcParams.update({'font.size': 40})

    N = len(df)
    ind = np.arange(N)
    width = 0.5

    plt.gcf().set_size_inches(0.075 * (now - start).total_seconds(), 1.2 * N)

    b = plt.barh(ind, dataset[0], width, color = 'w')
    p = plt.barh(ind, dataset[1], width, left = dataset[0], color = 'xkcd:ivory', linewidth = 1, edgecolor = 'k')
    rf = plt.barh(ind, dataset[2], width, left = dataset[0] + dataset[1], color = 'xkcd:chartreuse', linewidth = 1, edgecolor = 'k')
    rs = plt.barh(ind, dataset[3], width, left = dataset[0] + dataset[1], color = 'xkcd:coral', linewidth = 1, edgecolor = 'k')

    labels = df["scheduledNodes"]
    rects = plt.gca().patches
    i = 0
    for rect, label in zip(rects, labels):
        if df["scheduled"][i]:
            plt.gca().text(dataset[0][i] + dataset[1][i] + dataset[2][i] / 2 + dataset[3][i] / 2 , rect.get_y() - rect.get_height() / 2, label, ha='center', va='center', fontsize = 12)
        i += 1
        
    def timeTicks(x, pos):
        d = datetime.timedelta(seconds = x / 10**9)
        return str(d)

    formatter = matplotlib.ticker.FuncFormatter(timeTicks)
    plt.gca().xaxis.set_major_formatter(formatter)
    xl, xr = plt.xlim()
    xs = (xr - xl) // 10**9 // 5 * 10**9
    plt.xticks(np.arange(xl, xr, xs), fontsize = 12, rotation = 45)
    plt.xlabel('Time (s)', fontsize = 20)
    plt.yticks(ind, df["jobName"], fontsize = 12)
    plt.ylabel('Job', fontsize = 20)
    plt.legend((p[0], rf[0], rs[0]), (header[0], header[1], header[2]), fontsize = 12, ncol = 4, framealpha = 0, fancybox = True)
    plt.gca().invert_yaxis()
    plt.grid(linestyle='--')
    pdf.savefig(fig)
    

def NodeVisual(df,pdf):
    plt.clf()
    nodes = {}
    jobs_color = {}
    # sample color
    all_colors = [k for k,v in pltc.cnames.items()]
    colors = sample(all_colors, df.shape[0])
    
    #load data
    # node : jobs list
    for row in range(df.shape[0]):
        for node in df.iloc[row]["scheduledNodes"][1:-1].split(","):
            if node not in nodes:
                nodes[node] = []
            nodes[node].append((df.iloc[row]["scheduledTime"].total_seconds(),(df.iloc[row]["completionTime"]-df.iloc[row]["scheduledTime"]).total_seconds(),df.iloc[row]["jobName"]))
        
        jobs_color[df.iloc[row]["jobName"]] = colors[row]
        
    # sorted based on scheduled time
    for n in nodes:
        nodes[n] = sorted(nodes[n],key=lambda x:x[0])
    
    nodelist = sorted(nodes.keys())
    N = len(nodelist)
   
    # draw barh
    fig, ax = plt.subplots()
    # set fig size
    plt.gcf().set_size_inches(0.075 * (now - start).total_seconds(), 1.3 * N)
    i = 0
    for n in nodelist:
        plt.broken_barh([(time[0],time[1]) for time in nodes[n]],(i*10,6),facecolors=tuple(jobs_color[c[2]] for c in nodes[n]),linewidth = 1, edgecolor = 'k')
        i+=1
    
    # increase the upper space for label
    xl, xr = plt.xlim()
    yb, yt = plt.ylim()
    ax.set_ylim(yb, yt+5)

    xs = xr // 5
    plt.xticks(np.arange(0, xr, xs), fontsize = 12,rotation=45)
    plt.xlabel('Time (s)', fontsize = 20)
    plt.yticks(np.arange(N)*10+3, nodelist, fontsize = 12)
    plt.ylabel('Node', fontsize = 20)
    
    # fake bar for label
    fakeredbar = (mpatch.Rectangle((0, 0), 1, 1, fc=jobs_color[c]) for c in jobs_color)
    plt.legend(fakeredbar, (j for j in jobs_color), fontsize = 10, ncol = 4, framealpha = 0, fancybox = True)

    plt.grid(linestyle='--')
    pdf.savefig(fig)


if __name__ == "__main__":
    parser = argparse.ArgumentParser(description='Visualization tool for batch job scheduler.')
    parser.add_argument('-f', '--file', type=str, required=True, help='csv output file of job-mon')

    args = parser.parse_args()
    prog = parser.prog
    csv_file = args.file

    df = pd.read_csv(csv_file)
    df["creationTime"] = pd.to_datetime(df["creationTime"], format="%Y-%m-%d %H:%M:%S +0000 %Z")
    df["scheduledTime"] = pd.to_datetime(df["scheduledTime"], format="%Y-%m-%d %H:%M:%S +0000 %Z")
    df["completionTime"] = pd.to_datetime(df["completionTime"], format="%Y-%m-%d %H:%M:%S +0000 %Z")
    start = df["creationTime"].append(df["scheduledTime"]).append(df["completionTime"]).min()
    now = df["creationTime"].append(df["scheduledTime"]).append(df["completionTime"]).max()
    
    df["scheduled"] = ~df["scheduledTime"].isna()
    df.fillna(now, inplace=True)
    df["creationTime"] = df["creationTime"] - start
    df["scheduledTime"] = df["scheduledTime"] - start
    df["completionTime"] = df["completionTime"] - start
    df.sort_values(by=['creationTime'], inplace=True)
    df.reset_index(drop=True, inplace=True)
    pdf = PdfPages('%s.pdf' % os.path.splitext(csv_file)[0])
    JobVisual(df,pdf)
    NodeVisual(df,pdf)
    pdf.close()


